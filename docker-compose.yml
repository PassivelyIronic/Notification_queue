services:
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6
    hostname: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: notification_manager
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5

  app:
    build: .
    ports:
      - "3100:3100"
    environment:
      - APP_PORT=3100
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://root:example@mongo:27017/notification_manager?authSource=admin
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - app-network
    command: python -m src.index
    healthcheck:
      test: ["CMD", "python", "-m", "scripts.healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  push-worker:
    build: .
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://root:example@mongo:27017/notification_manager?authSource=admin
    depends_on:
      - redis
      - mongo
      - app
    networks:
      - app-network
    command: python -m sim.push_worker
    deploy:
      replicas: 1

  email-worker:
    build: .
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://root:example@mongo:27017/notification_manager?authSource=admin
    depends_on:
      - redis
      - mongo
      - app
    networks:
      - app-network
    command: python -m sim.mail_worker
    deploy:
      replicas: 1

volumes:
  redis_data:
  mongo_data:

networks:
  app-network:
    driver: bridge